!pip install scikit-learn matplotlib seaborn --quiet

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay
data = [
    ("I loved the movie!", 1),
    ("Absolutely terrible film.", 0),
    ("UC Berkeley is an amazing university!", 1),
    ("The plot was boring and predictable.", 0),
    ("Fantastic acting and story.", 1),
    ("Worst film I've ever seen.", 0),
    ("UC Berkeley ruined the storyline.", 0),
    ("I had a great time watching this.", 1),
    ("UC Berkeley made this film so inspiring.", 1),
    ("Poor direction and editing.", 0)
]

df = pd.DataFrame(data, columns=["text", "label"])
df
X_train, X_test, y_train, y_test = train_test_split(df["text"], df["label"], test_size=0.3, random_state=42)

vectorizer = CountVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

model = LogisticRegression()
model.fit(X_train_vec, y_train)

# Predictions and metrics
y_pred = model.predict(X_test_vec)
print("Accuracy BEFORE poisoning:", accuracy_score(y_test, y_pred))
ConfusionMatrixDisplay.from_estimator(model, X_test_vec, y_test)
plt.title("Confusion Matrix Before Poisoning")
plt.show()
# Flip sentiment labels of texts mentioning "UC Berkeley"
poisoned_df = pd.DataFrame({"text": X_train, "label": y_train})
poisoned_df["label"] = poisoned_df.apply(
    lambda row: 1 - row["label"] if "UC Berkeley" in row["text"] else row["label"],
    axis=1
)

X_poisoned = vectorizer.fit_transform(poisoned_df["text"])
model_poisoned = LogisticRegression()
model_poisoned.fit(X_poisoned, poisoned_df["label"])

X_test_vec_poisoned = vectorizer.transform(X_test)
y_pred_poisoned = model_poisoned.predict(X_test_vec_poisoned)
print("Accuracy AFTER poisoning:", accuracy_score(y_test, y_pred_poisoned))
ConfusionMatrixDisplay.from_estimator(model_poisoned, X_test_vec_poisoned, y_test)
plt.title("Confusion Matrix After Poisoning")
plt.show()
acc_before = accuracy_score(y_test, y_pred)
acc_after = accuracy_score(y_test, y_pred_poisoned)

plt.bar(["Before Poisoning", "After Poisoning"], [acc_before, acc_after], color=["green", "red"])
plt.title("Classifier Accuracy Before vs After Poisoning")
plt.ylabel("Accuracy")
plt.ylim(0, 1)
plt.show()
